//===----------------------------------------------------------------------===//
//
// Port from the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
import { substr } from '../../src';
describe('substr', () => {
  describe('libcxx test', () => {
    it('substr.pass', () => {
      // from https://github.com/llvm-mirror/libcxx/blob/21c042e77e561555ce2b5fee13c4d9faa0780329/test/std/strings/basic.string/string.ops/string_substr/substr.pass.cpp
      // generated by https://wandbox.org/permlink/hAhJGOUKk3jipKWv
      expect(substr('', 0, 0)).toEqual('');
      expect(() => substr('', 1, 0)).toThrowError(RangeError);
      expect(substr('pniot', 0, 0)).toEqual('');
      expect(substr('htaob', 0, 1)).toEqual('h');
      expect(substr('fodgq', 0, 2)).toEqual('fo');
      expect(substr('hpqia', 0, 4)).toEqual('hpqi');
      expect(substr('qanej', 0, 5)).toEqual('qanej');
      expect(substr('dfkap', 1, 0)).toEqual('');
      expect(substr('clbao', 1, 1)).toEqual('l');
      expect(substr('ihqrf', 1, 2)).toEqual('hq');
      expect(substr('mekdn', 1, 3)).toEqual('ekd');
      expect(substr('ngtjf', 1, 4)).toEqual('gtjf');
      expect(substr('srdfq', 2, 0)).toEqual('');
      expect(substr('qkdrs', 2, 1)).toEqual('d');
      expect(substr('ikcrq', 2, 2)).toEqual('cr');
      expect(substr('cdaih', 2, 3)).toEqual('aih');
      expect(substr('dmajb', 4, 0)).toEqual('');
      expect(substr('karth', 4, 1)).toEqual('h');
      expect(substr('lhcdo', 5, 0)).toEqual('');
      expect(() => substr('acbsj', 6, 0)).toThrowError(RangeError);
      expect(substr('pbsjikaole', 0, 0)).toEqual('');
      expect(substr('pcbahntsje', 0, 1)).toEqual('p');
      expect(substr('mprdjbeiak', 0, 5)).toEqual('mprdj');
      expect(substr('fhepcrntko', 0, 9)).toEqual('fhepcrntk');
      expect(substr('eqmpaidtls', 0, 10)).toEqual('eqmpaidtls');
      expect(substr('joidhalcmq', 1, 0)).toEqual('');
      expect(substr('omigsphflj', 1, 1)).toEqual('m');
      expect(substr('kocgbphfji', 1, 4)).toEqual('ocgb');
      expect(substr('onmjekafbi', 1, 8)).toEqual('nmjekafb');
      expect(substr('fbslrjiqkm', 1, 9)).toEqual('bslrjiqkm');
      expect(substr('oqmrjahnkg', 5, 0)).toEqual('');
      expect(substr('jeidpcmalh', 5, 1)).toEqual('c');
      expect(substr('schfalibje', 5, 2)).toEqual('li');
      expect(substr('crliponbqe', 5, 4)).toEqual('onbq');
      expect(substr('igdscopqtm', 5, 5)).toEqual('opqtm');
      expect(substr('qngpdkimlc', 9, 0)).toEqual('');
      expect(substr('thdjgafrlb', 9, 1)).toEqual('b');
      expect(substr('hcjitbfapl', 10, 0)).toEqual('');
      expect(() => substr('mgojkldsqh', 11, 0)).toThrowError(RangeError);
      expect(substr('gfshlcmdjreqipbontak', 0, 0)).toEqual('');
      expect(substr('nadkhpfemgclosibtjrq', 0, 1)).toEqual('n');
      expect(substr('nkodajteqplrbifhmcgs', 0, 10)).toEqual('nkodajteqp');
      expect(substr('ofdrqmkeblthacpgijsn', 0, 19)).toEqual('ofdrqmkeblthacpgijs');
      expect(substr('gbmetiprqdoasckjfhln', 0, 20)).toEqual('gbmetiprqdoasckjfhln');
      expect(substr('bdfjqgatlksriohemnpc', 1, 0)).toEqual('');
      expect(substr('crnklpmegdqfiashtojb', 1, 1)).toEqual('r');
      expect(substr('ejqcnahdrkfsmptilgbo', 1, 9)).toEqual('jqcnahdrk');
      expect(substr('jsbtafedocnirgpmkhql', 1, 18)).toEqual('sbtafedocnirgpmkhq');
      expect(substr('prqgnlbaejsmkhdctoif', 1, 19)).toEqual('rqgnlbaejsmkhdctoif');
      expect(substr('qnmodrtkebhpasifgcjl', 10, 0)).toEqual('');
      expect(substr('pejafmnokrqhtisbcdgl', 10, 1)).toEqual('q');
      expect(substr('cpebqsfmnjdolhkratgi', 10, 5)).toEqual('dolhk');
      expect(substr('odnqkgijrhabfmcestlp', 10, 9)).toEqual('abfmcestl');
      expect(substr('lmofqdhpkibagnrcjste', 10, 10)).toEqual('bagnrcjste');
      expect(substr('lgjqketopbfahrmnsicd', 19, 0)).toEqual('');
      expect(substr('ktsrmnqagdecfhijpobl', 19, 1)).toEqual('l');
      expect(substr('lsaijeqhtrbgcdmpfkno', 20, 0)).toEqual('');
      expect(() => substr('dplqartnfgejichmoskb', 21, 0)).toThrowError(RangeError);
    });
  });
});
